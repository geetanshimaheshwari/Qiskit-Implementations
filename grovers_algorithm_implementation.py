# -*- coding: utf-8 -*-
"""Grovers_Algorithm_implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jFCwTxCe-pz7_41hGmZNEmDVsz_0A-Fa
"""

! pip install qiskit

my_list = [1,3,5,2,4,9,5,8,0,7,6]

def the_oracle(my_input):
  winner=7
  if my_input is winner:
    response = True
  else:
    response=False
  return response

for index,trial_number in enumerate(my_list):
  if the_oracle(trial_number)is True:
    print('Winner found at index %i'%index)
    print('%i calls to the Oracle used'%(index+1))
    break

## Quantum Advantage - Grover's Algorithm

from qiskit import *
import matplotlib.pyplot as plt
import numpy as np

# define the Oracle Circuit
oracle= QuantumCircuit(2,name='oracle')
oracle.cz(0,1)
oracle.to_gate()
oracle.draw()

! pip install qiskit-aer

from qiskit_aer import Aer

backend = Aer.get_backend('statevector_simulator')
grover_circ = QuantumCircuit(2,2)
grover_circ.h([0,1])
grover_circ.append(oracle,[0,1])
grover_circ.draw()

# Transpile and run
from qiskit import transpile
compiled_circuit = transpile(grover_circ, backend)
job = backend.run(compiled_circuit)

# Get result
result = job.result()

sv = result.get_statevector()
np.around(sv,2)

reflection = QuantumCircuit(2, name='reflection')
reflection.h([0,1])
reflection.z([0,1])
reflection.cz(0,1)
reflection.h([0,1])
reflection.to_gate()

reflection.draw()

backend=Aer.get_backend('qasm_simulator')
grover_circ = QuantumCircuit(2,2)
grover_circ.h([0,1])
grover_circ.append(oracle,[0,1])
grover_circ.append(reflection,[0,1])
grover_circ.measure([0,1],[0,1])

grover_circ.draw()

# Transpile and run
from qiskit import transpile
compiled_circuit = transpile(grover_circ, backend)
job = backend.run(compiled_circuit,shots=1)

# Get result
result = job.result()
result.get_counts()

